# -*- coding: UTF-8 -*-
#brailleDisplayDrivers/mb408sl.py
#A part of NonVisual Desktop Access (NVDA)
#This file is covered by the GNU General Public License.
#See the file COPYING for more details.
#Copyright (C) 2011 Alberto Benassati <benassati@cavazza.it>
#Fixed by Alberto Buffolino <a.buffolino@gmail.com>
#on 04.04.2013
#changelog 04.04.2013:
#now, the DLL is loaded from .py script directory,
#and not from brailleDisplayDrivers in main path

from logHandler import log
from ctypes import *
import inputCore
import wx
import braille
import os

try:
	_basePath=os.path.dirname(__file__)
	mbDll=windll.LoadLibrary(_basePath+"\\mb408sl.dll")
except:
	mbDll=None

mbCellsMap=[]
KEY_CHECK_INTERVAL = 50




def convertMbCells(cell):
	newCell = ((1<<6 if cell & 1<<4 else 0) |
		(1<<5 if cell & 1<<5  else 0) |
		(1<<0 if cell & 1<<6  else 0) |
		(1<<3 if cell & 1<<0  else 0) |
		(1<<2 if cell & 1<<1  else 0) |
		(1<<1 if cell & 1<<2  else 0) |
		(1<<7 if cell & 1<<3  else 0) |
		(1<<4 if cell & 1<<7  else 0))
	return newCell

class BrailleDisplayDriver(braille.BrailleDisplayDriver):
	name = "mb408sl"
	description = _("MDV Mb408 sl")

	@classmethod
	def check(cls):
		return bool(mbDll)

	def  __init__(self):
		global mbCellsMap
		super(BrailleDisplayDriver, self).__init__()
		mbCellsMap=[convertMbCells(x) for x in range(256)]
		if (mbDll.BrlInit("COM1", 19200)):
			self._keyCheckTimer = wx.PyTimer(self._handleKeyPresses)
			self._keyCheckTimer.Start(KEY_CHECK_INTERVAL)
		else:
			raise RuntimeError("No display found")

	def terminate(self):
		super(BrailleDisplayDriver, self).terminate()
		try:
			self._keyCheckTimer.Stop()
			self._keyCheckTimer = None
		except:
			pass
		mbDll.BrlTerminate()

	def _get_numCells(self):
		return 40

	def _handleKeyPresses(self):
		while True:
			try:
				key=mbDll.ReadBuf()
			except:
				pass
			if not key: break
			if not key: break
			if key==11: braille.handler.scrollBack()
			elif key==13: braille.handler.scrollForward()
			elif (key >= 257) and (key <= 296): braille.handler.routeTo(key-257) 

	def _onKeyPress(self, key):
		try:
                        if (key >= 257) and (key <= 296):                                 
			        inputCore.manager.executeGesture(InputGesture(MB_KEYS[65],key-256))
                        if (key <= 64):
			        inputCore.manager.executeGesture(InputGesture(MB_KEYS[key],0))
		except inputCore.NoInputGestureAction:
			pass

	def display(self, cells):
		cells="".join(chr(mbCellsMap[x]) for x in cells)
		mbDll.WriteBuf(cells) 

	gestureMap = inputCore.GlobalGestureMap({
		"globalCommands.GlobalCommands": {
			"braille_routeTo": ("br(mb):route",),
			"braille_scrollBack": ("br(mb):LF",),
			"braille_previousLine": ("br(mb):UP",),
			"braille_nextLine": ("br(mb):DN",),
			"braille_scrollForward": ("br(mb):RG",),			
                        "kb:shift+tab": ("br(mb):SLF",),
			"kb:tab": ("br(mb):SRG",),
			"kb:alt+tab": ("br(mb):SDN",),
			"kb:alt+shift+tab": ("br(mb):SUP",),
                }
	})


class InputGesture(braille.BrailleDisplayGesture):

	source = BrailleDisplayDriver.name

	def __init__(self, command, argument):
		super(InputGesture, self).__init__()
		self.id = command
		if (command == MB_KEYS[65]):
			self.routingIndex = argument
                
